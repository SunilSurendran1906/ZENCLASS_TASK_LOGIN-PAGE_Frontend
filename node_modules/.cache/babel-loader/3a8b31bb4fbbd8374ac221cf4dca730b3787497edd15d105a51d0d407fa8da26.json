{"ast":null,"code":"import toast from \"react-hot-toast\";\n\n// validate login page username\nexport async function usernameVaildate(values) {\n  const error = usernameVerify({}, values);\n  return error;\n}\n\n// validate password\nexport async function PasswordValidate(values) {\n  const errors = passwordVerify({}, values);\n}\n\n// validate password\n_c = PasswordValidate;\nfunction passwordVerify(error = {}, values) {\n  const specialChars = /[`!@#$%^&*()_+\\[\\]{};':\"\\\\|,.<>\\/?~]/;\n  if (!values.password) {\n    error.password = toast.error(\"Password Required....!\");\n  } else if (values.password.includes(\"\")) {\n    error.password = toast.error(\"Wrong password\");\n  } else if (values.password.length < 4) {} else if (!specialChars.test(values.password)) {\n    error.password = toast.error(\"Password must have special characters\");\n  }\n  return error;\n}\n\n// validate username\nfunction usernameVerify(error = {}, values) {\n  if (!values.username) {\n    error.username = toast.error(\"Username Required...!\");\n  } else if (values.username.includes(\"\")) {\n    error.username = toast.error(\"Invalid Username\");\n  }\n  return error;\n}\nvar _c;\n$RefreshReg$(_c, \"PasswordValidate\");","map":{"version":3,"names":["toast","usernameVaildate","values","error","usernameVerify","PasswordValidate","errors","passwordVerify","_c","specialChars","password","includes","length","test","username","$RefreshReg$"],"sources":["D:/Nodejs/BACKEND/ZENCLASS_NODE_TASK/RESTPASSWORD/login_app/client/src/helper/validate.js"],"sourcesContent":["import toast from \"react-hot-toast\";\r\n\r\n// validate login page username\r\nexport async function usernameVaildate(values) {\r\n  const error = usernameVerify({}, values);\r\n  return error;\r\n}\r\n\r\n// validate password\r\nexport async function PasswordValidate(values) {\r\n  const errors = passwordVerify({}, values);\r\n}\r\n\r\n// validate password\r\nfunction passwordVerify(error = {}, values) {\r\n  const specialChars = /[`!@#$%^&*()_+\\[\\]{};':\"\\\\|,.<>\\/?~]/;\r\n\r\n  if (!values.password) {\r\n    error.password = toast.error(\"Password Required....!\");\r\n  } else if (values.password.includes(\"\")) {\r\n    error.password = toast.error(\"Wrong password\");\r\n  } else if (values.password.length < 4) {\r\n  } else if (!specialChars.test(values.password)) {\r\n    error.password = toast.error(\"Password must have special characters\");\r\n  }\r\n  return error;\r\n}\r\n\r\n// validate username\r\nfunction usernameVerify(error = {}, values) {\r\n  if (!values.username) {\r\n    error.username = toast.error(\"Username Required...!\");\r\n  } else if (values.username.includes(\"\")) {\r\n    error.username = toast.error(\"Invalid Username\");\r\n  }\r\n  return error;\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,iBAAiB;;AAEnC;AACA,OAAO,eAAeC,gBAAgBA,CAACC,MAAM,EAAE;EAC7C,MAAMC,KAAK,GAAGC,cAAc,CAAC,CAAC,CAAC,EAAEF,MAAM,CAAC;EACxC,OAAOC,KAAK;AACd;;AAEA;AACA,OAAO,eAAeE,gBAAgBA,CAACH,MAAM,EAAE;EAC7C,MAAMI,MAAM,GAAGC,cAAc,CAAC,CAAC,CAAC,EAAEL,MAAM,CAAC;AAC3C;;AAEA;AAAAM,EAAA,GAJsBH,gBAAgB;AAKtC,SAASE,cAAcA,CAACJ,KAAK,GAAG,CAAC,CAAC,EAAED,MAAM,EAAE;EAC1C,MAAMO,YAAY,GAAG,sCAAsC;EAE3D,IAAI,CAACP,MAAM,CAACQ,QAAQ,EAAE;IACpBP,KAAK,CAACO,QAAQ,GAAGV,KAAK,CAACG,KAAK,CAAC,wBAAwB,CAAC;EACxD,CAAC,MAAM,IAAID,MAAM,CAACQ,QAAQ,CAACC,QAAQ,CAAC,EAAE,CAAC,EAAE;IACvCR,KAAK,CAACO,QAAQ,GAAGV,KAAK,CAACG,KAAK,CAAC,gBAAgB,CAAC;EAChD,CAAC,MAAM,IAAID,MAAM,CAACQ,QAAQ,CAACE,MAAM,GAAG,CAAC,EAAE,CACvC,CAAC,MAAM,IAAI,CAACH,YAAY,CAACI,IAAI,CAACX,MAAM,CAACQ,QAAQ,CAAC,EAAE;IAC9CP,KAAK,CAACO,QAAQ,GAAGV,KAAK,CAACG,KAAK,CAAC,uCAAuC,CAAC;EACvE;EACA,OAAOA,KAAK;AACd;;AAEA;AACA,SAASC,cAAcA,CAACD,KAAK,GAAG,CAAC,CAAC,EAAED,MAAM,EAAE;EAC1C,IAAI,CAACA,MAAM,CAACY,QAAQ,EAAE;IACpBX,KAAK,CAACW,QAAQ,GAAGd,KAAK,CAACG,KAAK,CAAC,uBAAuB,CAAC;EACvD,CAAC,MAAM,IAAID,MAAM,CAACY,QAAQ,CAACH,QAAQ,CAAC,EAAE,CAAC,EAAE;IACvCR,KAAK,CAACW,QAAQ,GAAGd,KAAK,CAACG,KAAK,CAAC,kBAAkB,CAAC;EAClD;EACA,OAAOA,KAAK;AACd;AAAC,IAAAK,EAAA;AAAAO,YAAA,CAAAP,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}